<?php
/**
 * CRUD Controller.
 *
 * @category  ZendExt
 * @package   ZendExt_Controller
 * @copyright 2010 Monits
 * @license   Copyright (C) 2010. All rights reserved.
 * @version   Release: 1.0.0
 * @link      http://www.monits.com/
 * @since     1.0.0
 */

/**
 * CRUD Controller.
 *
 * @category  ZendExt
 * @package   ZendExt_Controller
 * @author    itirabasso <itirabasso@monits.com>
 * @copyright 2010 Monits
 * @license   Copyright 2010. All rights reserved.
 * @version   Release: 1.0.0
 * @link      http://www.monits.com/
 * @since     1.0.0
 */
abstract class ZendExt_Controller_CRUDAbstract
extends Zend_Controller_Action
{
    protected $_builderClass = null;
    protected $_fieldToColumnMap = null;
    protected $_itemsPerPage = 30;

    protected $_dataSource = null;

    const DEFAULT_PAGE = 1;

    /**
     * indexAction.
     *
     * @return void
     */
    public function indexAction()
    {
        $this->_forward('list');
    }

    /**
     * listAction.
     *
     * @return void
     */
    public function listAction()
    {
        $request = $this->getRequest();

        $pk = $this->_dataSource->getPk();
        $builder = new $this->_builderClass();
        $fields = $builder->getFieldsNames();

        $page           = $this->_getParam('page', self::DEFAULT_PAGE);
        $ipp            = $this->_getParam('ipp', $this->_itemsPerPage);
        $orderBy        = $this->_getParam('orderBy', $pk);
        $orderAlignment = $this->_getParam('order', 'ASC');

        if ($orderBy != $pk) {
            $orderBy = $this->_fieldToColumnMap[$orderBy];
        }

        $table = $this->_dataSource->getTable();

        $select = $table->select()
                        ->order(
                            $orderBy,
                            $orderAlignment == 'ASC' ? 'ASC' : 'DESC'
                        );

        $paginator = Zend_Paginator::factory($select);
        $paginator->setCurrentPageNumber($page);
        $paginator->setItemCountPerPage($ipp);

        $this->view->paginator = $paginator;
    }

    /**
     * newAction.
     *
     * @return void
     */
    public function newAction()
    {
        $request = $this->getRequest();

        if ($request->isPost()) {
            return $this->_newForm();
        }

        $data = array();
        $fields = $builder->getFieldNames();

        /*
         * If it's a sequence, the pk should be autogenerated,
         * remove them from field list.
         */
        if ($this->_dataSource->isSequence()) {
            $pk = $this->_dataSource->getPk();
            $this->_unsetPK($pk, $fields);
        }

        try {
            $table = $this->_dataSource->getTable();

            $data = $this->_completeData($fields, $table);

            $table->insert($data);

        } catch (ZendExt_Builder_ValidationException $e) {
            $this->view->failedField = $e->getField();
            $this->view->errors = $e->getErrors();
        }
    }

    /**
     * updateAction.
     *
     * @return void
     */
    public function updateAction()
    {
        $request = $this->getRequest();

        if ($request->isPost()) {
            return ;
        }

        $fields = $builder->getFieldsNames();

        $pk = $this->_dataSource->getPk();

        $this->_unsetPK($pk, $fields);

        $data = array();
        try{
            $table = $this->_dataSource->getTable();

            $data = $this->_completeData($fields, $table);

            $where = $this->_completeWhere($pk, $table);

            $table->update($data, $where);

        } catch (ZendExt_Builder_ValidationException $e) {
            $this->view->failedField = $e->getField();
            $this->view->errors = $e->getErrors();
        }
    }

    /**
     * deleteAction.
     *
     * @return void
     */
    public function deleteAction()
    {
        $request = $this->getRequest();

        if ($request->isPost()) {
            return;
        }

        $pk = $this->_dataSource->getPk();

        try {
            $table = $this->_dataSource->getTable();

            $where = $this->_completeWhere($pk, $table);

            $table->delete($where);

        } catch (ZendExt_Builder_ValidationException $e) {
            $this->view->failedField = $e->getField();
            $this->view->errors = $e->getErrors();
        }
    }

    /**
     * Retrieves the WHERE sentence for each primary key.
     *
     * @param string|array           $pk    The primary key of the table.
     * @param Zend_Db_Table_Abstract $table The table.
     *
     * @return array
     */
    private function _completeWhere($pk, $table)
    {
        $adapter = $table->getAdapter();
        $builder = new $this->_builderClass();
        $where = array();

        foreach ($pk as $k) {
            $field = array_search($k, $this->_fieldToColumnMap);
            $method = 'with' . ucfirst($field);
            $value = $this->_getParam($field);

            $builder->$method($value);
            $where[] = $adapter->quoteInto($k . ' = ?', $value);
        }

        return $where;
    }

    /**
     * Retrieves the data from the form for each field.
     *
     * @param array                  $fields The names of the fields.
     * @param Zend_Db_Table_Abstract $table  The table.
     *
     * @return array
     */
    private function _completeData(array $fields, $table)
    {
        $adapter = $table->getAdapter();
        $builder = new $this->_builderClass();
        $data = array();

        foreach ($fields as $field) {
            $method = 'with' . ucfirst($field);
            $value = $this->_getParam($field);

            $builder->$method($value);
            $data[$this->_fieldToColumnMap[$field]] = $value;
        }

        return $data;
    }

    /**
     * Unset the primary key in the form.
     *
     * @param array|string $pk     The primary key to be unseted.
     * @param array        $fields The name of the felds.
     *
     * @return void
     */
    private function _unsetPK($pk, $fields)
    {
        foreach ((array) $pk as $k) {
            $pkField = array_search($k, $this->_fieldToColumnMap);
            $indexField = array_search($pkField, $fields);
            unset($fields[$indexField]);
        }
    }

    /**
     * Create a new form.
     *
     * @return void.
     */
    private function _newForm()
    {
        $builder = new $this->_builderClass();
        $fields = $builder->getFieldsNames();

        $form = new Zend_Form();
        $form->disableLoadDefaultDecorators(true)
        ->setAttrib('id', '')
        ->setAttrib('class', '')
        ->setAction('')
        ->setMethod('post')
        ->addDecorator('HtmlTag', array('tag' => 'dl','class' => ''));

        foreach ($fields as $field) {
            $form->addElement('text', $field,
            array(
                    'Label'    => $field . ':',
            //TODO: Verificar en la db o builder si el campo es requerido o no
                    'required' => true
            )
            );
        }
        $form->addElement('submit', 'send');

        return $form;
    }
}